/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Json = JsonValue;

export type JsonArray = JsonValue[];

export type JsonObject = {
  [x: string]: JsonValue | undefined;
};

export type JsonPrimitive = boolean | number | string | null;

export type JsonValue = JsonArray | JsonObject | JsonPrimitive;

export type Numeric = ColumnType<string, number | string, number | string>;

export type PetType = "bird" | "cat" | "dog" | "fish" | "hamster" | "other" | "rabbit";

export type ServiceCategory = "accessories" | "food" | "grooming" | "supplies" | "toys" | "veterinary";

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export interface Comments {
  authorAvatar: string | null;
  authorId: string | null;
  authorName: string;
  content: string;
  createdAt: Generated<Timestamp | null>;
  id: Generated<number>;
  postId: number | null;
}

export interface Conversations {
  createdAt: Generated<Timestamp | null>;
  id: Generated<number>;
  lastMessageAt: Generated<Timestamp | null>;
  participant1Id: number | null;
  participant2Id: number | null;
}

export interface Likes {
  createdAt: Generated<Timestamp | null>;
  id: Generated<number>;
  postId: number | null;
  userId: string | null;
  userName: string;
}

export interface LoginAttempts {
  attemptedAt: Timestamp;
  createdAt: Generated<Timestamp | null>;
  email: string;
  id: Generated<number>;
  success: Generated<boolean>;
}

export interface Messages {
  content: string;
  createdAt: Generated<Timestamp | null>;
  id: Generated<number>;
  isRead: Generated<boolean | null>;
  parentMessageId: number | null;
  recipientId: number | null;
  senderId: number | null;
  subject: string | null;
  updatedAt: Generated<Timestamp | null>;
}

export interface PetPosts {
  caption: string | null;
  commentsCount: Generated<number | null>;
  createdAt: Generated<Timestamp | null>;
  id: Generated<number>;
  imageUrl: string;
  likesCount: Generated<number | null>;
  ownerId: string | null;
  petId: number | null;
}

export interface Pets {
  age: number | null;
  breed: string | null;
  createdAt: Generated<Timestamp | null>;
  description: string | null;
  id: Generated<number>;
  imageUrl: string | null;
  name: string;
  ownerId: string | null;
  type: PetType;
  updatedAt: Generated<Timestamp | null>;
  weight: Numeric | null;
}

export interface Sessions {
  createdAt: Generated<Timestamp | null>;
  expiresAt: Timestamp;
  id: string;
  lastAccessed: Generated<Timestamp | null>;
  userId: number | null;
}

export interface Sitters {
  address: string | null;
  available: Generated<boolean | null>;
  bio: string | null;
  createdAt: Generated<Timestamp | null>;
  email: string | null;
  hourlyRate: Numeric;
  id: Generated<number>;
  imageUrl: string | null;
  name: string;
  phone: string | null;
  rating: Generated<Numeric | null>;
  services: string[] | null;
  totalReviews: Generated<number | null>;
}

export interface Stores {
  address: string | null;
  category: ServiceCategory;
  createdAt: Generated<Timestamp | null>;
  description: string | null;
  email: string | null;
  hours: string | null;
  id: Generated<number>;
  imageUrl: string | null;
  name: string;
  phone: string | null;
  priceRange: string | null;
  rating: Generated<Numeric | null>;
  totalReviews: Generated<number | null>;
  website: string | null;
}

export interface SubscriptionPlans {
  createdAt: Generated<Timestamp | null>;
  description: string | null;
  durationMonths: number;
  features: Generated<Json | null>;
  id: Generated<number>;
  isActive: Generated<boolean | null>;
  name: string;
  price: Numeric;
}

export interface Trainers {
  address: string | null;
  available: Generated<boolean | null>;
  bio: string | null;
  createdAt: Generated<Timestamp | null>;
  email: string | null;
  hourlyRate: Numeric;
  id: Generated<number>;
  imageUrl: string | null;
  name: string;
  phone: string | null;
  rating: Generated<Numeric | null>;
  specialties: string[] | null;
  totalReviews: Generated<number | null>;
}

export interface UserPasswords {
  createdAt: Generated<Timestamp | null>;
  passwordHash: string;
  updatedAt: Generated<Timestamp | null>;
  userId: number;
}

export interface Users {
  address: string | null;
  avatarUrl: string | null;
  bio: string | null;
  createdAt: Generated<Timestamp | null>;
  displayName: string;
  email: string;
  id: Generated<number>;
  phoneNumber: string | null;
  role: Generated<string | null>;
  updatedAt: Generated<Timestamp | null>;
}

export interface UserSubscriptions {
  autoRenew: Generated<boolean | null>;
  createdAt: Generated<Timestamp | null>;
  endDate: Timestamp;
  id: Generated<number>;
  paymentReference: string | null;
  planId: number | null;
  startDate: Generated<Timestamp | null>;
  status: Generated<string | null>;
  updatedAt: Generated<Timestamp | null>;
  userId: number | null;
}

export interface DB {
  comments: Comments;
  conversations: Conversations;
  likes: Likes;
  loginAttempts: LoginAttempts;
  messages: Messages;
  petPosts: PetPosts;
  pets: Pets;
  sessions: Sessions;
  sitters: Sitters;
  stores: Stores;
  subscriptionPlans: SubscriptionPlans;
  trainers: Trainers;
  userPasswords: UserPasswords;
  users: Users;
  userSubscriptions: UserSubscriptions;
}


// Use these for zod schema enums or other purposes, since the kysely enums are just types
export const PetTypeArrayValues: [PetType, ...PetType[]] = ["bird","cat","dog","fish","hamster","other","rabbit"];
export const ServiceCategoryArrayValues: [ServiceCategory, ...ServiceCategory[]] = ["accessories","food","grooming","supplies","toys","veterinary"];
// Note: kysely maps the table/column/enum names from snake_case to camelCase and PascalCase. When running SQL statements, make sure to use snake_case, but TypeScript code should use camelCase or PascalCase.